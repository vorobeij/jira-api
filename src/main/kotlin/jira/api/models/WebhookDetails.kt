/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.models

import kotlinx.serialization.*

/**
 * A list of webhooks.
 *
 * @param events, required, The Jira events that trigger the webhook.
 * @param fieldIdsFilter, optional, A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
 * @param issuePropertyKeysFilter, optional, A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
 * @param jqlFilter, required, The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:

 *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.".
 *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
 */
@Serializable
data class WebhookDetails(
    @SerialName("events") val events: List<String>,
    @SerialName("fieldIdsFilter") val fieldIdsFilter: List<String>? = null,
    @SerialName("issuePropertyKeysFilter") val issuePropertyKeysFilter: List<String>? = null,
    @SerialName("jqlFilter") val jqlFilter: String
)