/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.CreateIssueSecuritySchemeDetails
import jira.api.models.PageBeanIssueSecuritySchemeToProjectMapping
import jira.api.models.PageBeanSecurityLevel
import jira.api.models.PageBeanSecurityLevelMember
import jira.api.models.PageBeanSecuritySchemeWithProjects
import jira.api.models.SecurityScheme
import jira.api.models.SecuritySchemes
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface IssueSecuritySchemesApi {

    /**
     * POST /rest/api/3/issuesecurityschemes
     *
     * Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param createIssueSecuritySchemeDetails, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issuesecurityschemes")
    suspend fun createIssueSecurityScheme(
        @Body createIssueSecuritySchemeDetails: CreateIssueSecuritySchemeDetails
    ): Unit

    /**
     * GET /rest/api/3/issuesecurityschemes/{id}
     *
     * Returns an issue security scheme along with its security levels.

     **[Permissions](#permissions) required:**

     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
     * @param id The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.  (example: null)
     *
     * @return SecurityScheme
     */
    @GET("/rest/api/3/issuesecurityschemes/{id}")
    suspend fun getIssueSecurityScheme(
        @Body id: Long
    ): SecurityScheme

    /**
     * GET /rest/api/3/issuesecurityschemes
     *
     * Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return SecuritySchemes
     */
    @GET("/rest/api/3/issuesecurityschemes")
    suspend fun getIssueSecuritySchemes(): SecuritySchemes

    /**
     * GET /rest/api/3/issuesecurityschemes/level/member
     *
     * Returns a [paginated](#pagination) list of issue security level members.

    Only issue security level members in the context of classic projects are returned.

    Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param id The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`. (optional) (example: null)
     * @param schemeId The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`. (optional) (example: null)
     * @param levelId The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`. (optional) (example: null)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `all` Returns all expandable information
     *  `field` Returns information about the custom field granted the permission
     *  `group` Returns information about the group that is granted the permission
     *  `projectRole` Returns information about the project role granted the permission
     *  `user` Returns information about the user who is granted the permission (optional) (example: null)
     *
     * @return PageBeanSecurityLevelMember
     */
    @GET("/rest/api/3/issuesecurityschemes/level/member")
    suspend fun getSecurityLevelMembers(
        @Query("startAt") startAt: String = 0,
        @Query("maxResults") maxResults: String = 50,
        @Query("id") id: List<String>? = null,
        @Query("schemeId") schemeId: List<String>? = null,
        @Query("levelId") levelId: List<String>? = null,
        @Query("expand") expand: String? = null
    ): PageBeanSecurityLevelMember

    /**
     * GET /rest/api/3/issuesecurityschemes/level
     *
     * Returns a [paginated](#pagination) list of issue security levels.

    Only issue security levels in the context of classic projects are returned.

    Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param id The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`. (optional) (example: null)
     * @param schemeId The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`. (optional) (example: null)
     * @param onlyDefault When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false. (optional) (example: null)
     *
     * @return PageBeanSecurityLevel
     */
    @GET("/rest/api/3/issuesecurityschemes/level")
    suspend fun getSecurityLevels(
        @Query("startAt") startAt: String = 0,
        @Query("maxResults") maxResults: String = 50,
        @Query("id") id: List<String>? = null,
        @Query("schemeId") schemeId: List<String>? = null,
        @Query("onlyDefault") onlyDefault: Boolean = false
    ): PageBeanSecurityLevel

    /**
     * GET /rest/api/3/issuesecurityschemes/project
     *
     * Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param issueSecuritySchemeId The list of security scheme IDs to be filtered out. (optional) (example: null)
     * @param projectId The list of project IDs to be filtered out. (optional) (example: null)
     *
     * @return PageBeanIssueSecuritySchemeToProjectMapping
     */
    @GET("/rest/api/3/issuesecurityschemes/project")
    suspend fun searchProjectsUsingSecuritySchemes(
        @Query("startAt") startAt: String = 0,
        @Query("maxResults") maxResults: String = 50,
        @Query("issueSecuritySchemeId") issueSecuritySchemeId: List<String>? = null,
        @Query("projectId") projectId: List<String>? = null
    ): PageBeanIssueSecuritySchemeToProjectMapping

    /**
     * GET /rest/api/3/issuesecurityschemes/search
     *
     * Returns a [paginated](#pagination) list of issue security schemes.
    If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \{@link IssueSecuritySchemeResource\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\} to obtain all projects related to scheme.

    Only issue security schemes in the context of classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param id The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`. (optional) (example: null)
     * @param projectId The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`. (optional) (example: null)
     *
     * @return PageBeanSecuritySchemeWithProjects
     */
    @GET("/rest/api/3/issuesecurityschemes/search")
    suspend fun searchSecuritySchemes(
        @Query("startAt") startAt: String = 0,
        @Query("maxResults") maxResults: String = 50,
        @Query("id") id: List<String>? = null,
        @Query("projectId") projectId: List<String>? = null
    ): PageBeanSecuritySchemeWithProjects
}