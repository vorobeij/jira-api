/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.*
import retrofit2.http.*

interface JQLFunctionsAppsApi {

    /**
     * GET /rest/api/3/jql/function/computation
     *
     * Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \- the JQL fragment to replace the custom function clause with.

     **[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.

    The new `read:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.
     * @param functionKey The function key in format:

     *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`
     *  Connect: `[App key]__[Module key]` (optional) (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param orderBy [Order](#ordering) the results by a field:

     *  `functionKey` Sorts by the functionKey.
     *  `used` Sorts by the used timestamp.
     *  `created` Sorts by the created timestamp.
     *  `updated` Sorts by the updated timestamp. (optional) (example: null)
     *
     * @return PageBean2JqlFunctionPrecomputationBean
     */
    @GET("/rest/api/3/jql/function/computation")
    suspend fun getPrecomputations(
        @Query("functionKey") functionKey: List<String>? = null,
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 100,
        @Query("orderBy") orderBy: String? = null
    ): PageBean2JqlFunctionPrecomputationBean

    /**
     * POST /rest/api/3/jql/function/computation/search
     *
     * Returns function precomputations by IDs, along with information about when they were created, updated, and last used. Each precomputation has a `value` \- the JQL fragment to replace the custom function clause with.

     **[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.

    The new `read:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.
     * @param orderBy [Order](#ordering) the results by a field:

     *  `functionKey` Sorts by the functionKey.
     *  `used` Sorts by the used timestamp.
     *  `created` Sorts by the created timestamp.
     *  `updated` Sorts by the updated timestamp. (optional) (example: null)
     * @param jqlFunctionPrecomputationGetByIdRequest, request body
     *
     * @return JqlFunctionPrecomputationGetByIdResponse
     */
    @POST("/rest/api/3/jql/function/computation/search")
    suspend fun getPrecomputationsByID(
        @Query("orderBy") orderBy: String? = null,
        @Body jqlFunctionPrecomputationGetByIdRequest: JqlFunctionPrecomputationGetByIdRequest
    ): JqlFunctionPrecomputationGetByIdResponse

    /**
     * POST /rest/api/3/jql/function/computation
     *
     * Update the precomputation value of a function created by a Forge/Connect app.

     **[Permissions](#permissions) required:** An API for apps to update their own precomputations.

    The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.
     * @param skipNotFoundPrecomputations null (optional) (example: null)
     * @param jqlFunctionPrecomputationUpdateRequestBean, request body
     *
     * @return JqlFunctionPrecomputationUpdateResponse
     */
    @POST("/rest/api/3/jql/function/computation")
    suspend fun updatePrecomputations(
        @Query("skipNotFoundPrecomputations") skipNotFoundPrecomputations: Boolean = false,
        @Body jqlFunctionPrecomputationUpdateRequestBean: JqlFunctionPrecomputationUpdateRequestBean
    ): JqlFunctionPrecomputationUpdateResponse
}