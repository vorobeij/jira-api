/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.DefaultWorkflow
import jira.api.models.IssueTypeWorkflowMapping
import jira.api.models.IssueTypesWorkflowMapping
import jira.api.models.PublishDraftWorkflowScheme
import jira.api.models.WorkflowScheme
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface WorkflowSchemeDraftsApi {

    /**
     * POST /rest/api/3/workflowscheme/{id}/createdraft
     *
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft is created from.  (example: null)
     *
     * @return Unit
     */
    @POST("/rest/api/3/workflowscheme/{id}/createdraft")
    suspend fun createWorkflowSchemeDraftFromParent(
        @Body id: Long
    ): Unit

    /**
     * GET /rest/api/3/workflowscheme/{id}/draft/default
     *
     * Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.  (example: null)
     *
     * @return DefaultWorkflow
     */
    @GET("/rest/api/3/workflowscheme/{id}/draft/default")
    suspend fun getDraftDefaultWorkflow(
        @Body id: Long
    ): DefaultWorkflow

    /**
     * GET /rest/api/3/workflowscheme/{id}/draft/workflow
     *
     * Returns the workflow-issue type mappings for a workflow scheme's draft.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.  (example: null)
     * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. (optional) (example: null)
     *
     * @return IssueTypesWorkflowMapping
     */
    @GET("/rest/api/3/workflowscheme/{id}/draft/workflow")
    suspend fun getDraftWorkflow(
        @Body id: Long,
        @Query("workflowName") workflowName: String? = null
    ): IssueTypesWorkflowMapping

    /**
     * GET /rest/api/3/workflowscheme/{id}/draft
     *
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.
    Note that:

     *  Only active workflow schemes can have draft workflow schemes.
     *  An active workflow scheme can only have one draft workflow scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft was created from.  (example: null)
     *
     * @return WorkflowScheme
     */
    @GET("/rest/api/3/workflowscheme/{id}/draft")
    suspend fun getWorkflowSchemeDraft(
        @Body id: Long
    ): WorkflowScheme

    /**
     * GET /rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}
     *
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.  (example: null)
     * @param issueType The ID of the issue type.  (example: null)
     *
     * @return IssueTypeWorkflowMapping
     */
    @GET("/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}")
    suspend fun getWorkflowSchemeDraftIssueType(
        @Body id: Long,
        @Body issueType: String
    ): IssueTypeWorkflowMapping

    /**
     * POST /rest/api/3/workflowscheme/{id}/draft/publish
     *
     * Publishes a draft workflow scheme.

    Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.

    This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.  (example: null)
     * @param validateOnly Whether the request only performs a validation. (optional) (example: null)
     * @param publishDraftWorkflowScheme, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/workflowscheme/{id}/draft/publish")
    suspend fun publishDraftWorkflowScheme(
        @Body id: Long,
        @Query("validateOnly") validateOnly: Boolean = false,
        @Body publishDraftWorkflowScheme: PublishDraftWorkflowScheme
    ): Unit
}