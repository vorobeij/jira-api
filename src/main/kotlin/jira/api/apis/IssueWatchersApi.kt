/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.BulkIssueIsWatching
import jira.api.models.IssueList
import jira.api.models.Watchers
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST

interface IssueWatchersApi {

    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/watchers
     *
     * Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.

    This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param body, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issue/{issueIdOrKey}/watchers")
    suspend fun addWatcher(
        @Body issueIdOrKey: String,
        @Body body: String
    ): Unit

    /**
     * POST /rest/api/3/issue/watching
     *
     * Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.

    This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueList, request body
     *
     * @return BulkIssueIsWatching
     */
    @POST("/rest/api/3/issue/watching")
    suspend fun getIsWatchingIssueBulk(
        @Body issueList: IssueList
    ): BulkIssueIsWatching

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/watchers
     *
     * Returns the watchers for an issue.

    This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     *
     * @return Watchers
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/watchers")
    suspend fun getIssueWatchers(
        @Body issueIdOrKey: String
    ): Watchers
}