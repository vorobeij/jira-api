/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.*
import retrofit2.http.*

interface IssueTypeSchemesApi {

    /**
     * POST /rest/api/3/issuetypescheme
     *
     * Creates an issue type scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeSchemeDetails, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issuetypescheme")
    suspend fun createIssueTypeScheme(
        @Body issueTypeSchemeDetails: IssueTypeSchemeDetails
    ): Unit

    /**
     * GET /rest/api/3/issuetypescheme
     *
     * Returns a [paginated](#pagination) list of issue type schemes.

    Only issue type schemes used in classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param id The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. (optional) (example: null)
     * @param orderBy [Order](#ordering) the results by a field:

     *  `name` Sorts by issue type scheme name.
     *  `id` Sorts by issue type scheme ID. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.
     *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have. (optional) (example: null)
     * @param queryString String used to perform a case-insensitive partial match with issue type scheme name. (optional) (example: null)
     *
     * @return PageBeanIssueTypeScheme
     */
    @GET("/rest/api/3/issuetypescheme")
    suspend fun getAllIssueTypeSchemes(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("id") id: List<Long>? = null,
        @Query("orderBy") orderBy: String = "id",
        @Query("expand") expand: String = "",
        @Query("queryString") queryString: String = ""
    ): PageBeanIssueTypeScheme

    /**
     * GET /rest/api/3/issuetypescheme/project
     *
     * Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.

    Only issue type schemes used in classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param projectId The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`.  (example: null)
     *
     * @return PageBeanIssueTypeSchemeProjects
     */
    @GET("/rest/api/3/issuetypescheme/project")
    suspend fun getIssueTypeSchemeForProjects(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("projectId") projectId: List<Long>
    ): PageBeanIssueTypeSchemeProjects

    /**
     * GET /rest/api/3/issuetypescheme/mapping
     *
     * Returns a [paginated](#pagination) list of issue type scheme items.

    Only issue type scheme items used in classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param issueTypeSchemeId The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`. (optional) (example: null)
     *
     * @return PageBeanIssueTypeSchemeMapping
     */
    @GET("/rest/api/3/issuetypescheme/mapping")
    suspend fun getIssueTypeSchemesMapping(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("issueTypeSchemeId") issueTypeSchemeId: List<Long>? = null
    ): PageBeanIssueTypeSchemeMapping
}