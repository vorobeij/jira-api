/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.AuditRecords
import retrofit2.http.GET
import retrofit2.http.Query

interface AuditRecordsApi {

    /**
     * GET /rest/api/3/auditing/record
     *
     * Returns a list of audit records. The list can be filtered to include items:

     *  where each item in `filter` has at least one match in any of these fields:

     *  `summary`
     *  `category`
     *  `eventSource`
     *  `objectItem.name` If the object is a user, account ID is available to filter.
     *  `objectItem.parentName`
     *  `objectItem.typeName`
     *  `changedValues.changedFrom`
     *  `changedValues.changedTo`
     *  `remoteAddress`

    For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.
     *  created on or after a date and time.
     *  created or or before a date and time.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param offset The number of records to skip before returning the first result. (optional) (example: null)
     * @param limit The maximum number of results to return. (optional) (example: null)
     * @param filter The strings to match with audit field content, space separated. (optional) (example: null)
     * @param from The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned. (optional) (example: null)
     * @param to The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned. (optional) (example: null)
     *
     * @return AuditRecords
     */
    @GET("/rest/api/3/auditing/record")
    suspend fun getAuditRecords(
        @Query("offset") offset: Int = 0,
        @Query("limit") limit: Int = 1000,
        @Query("filter") filter: String? = null,
        @Query("from") from: String? = null,
        @Query("to") to: String? = null
    ): AuditRecords
}