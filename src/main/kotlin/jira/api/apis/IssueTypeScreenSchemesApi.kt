/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.*
import retrofit2.http.*

interface IssueTypeScreenSchemesApi {

    /**
     * POST /rest/api/3/issuetypescreenscheme
     *
     * Creates an issue type screen scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeDetails, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issuetypescreenscheme")
    suspend fun createIssueTypeScreenScheme(
        @Body issueTypeScreenSchemeDetails: IssueTypeScreenSchemeDetails
    ): Unit

    /**
     * GET /rest/api/3/issuetypescreenscheme/mapping
     *
     * Returns a [paginated](#pagination) list of issue type screen scheme items.

    Only issue type screen schemes used in classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param issueTypeScreenSchemeId The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`. (optional) (example: null)
     *
     * @return PageBeanIssueTypeScreenSchemeItem
     */
    @GET("/rest/api/3/issuetypescreenscheme/mapping")
    suspend fun getIssueTypeScreenSchemeMappings(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("issueTypeScreenSchemeId") issueTypeScreenSchemeId: List<Long>? = null
    ): PageBeanIssueTypeScreenSchemeItem

    /**
     * GET /rest/api/3/issuetypescreenscheme/project
     *
     * Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.

    Only issue type screen schemes used in classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.  (example: null)
     *
     * @return PageBeanIssueTypeScreenSchemesProjects
     */
    @GET("/rest/api/3/issuetypescreenscheme/project")
    suspend fun getIssueTypeScreenSchemeProjectAssociations(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("projectId") projectId: List<Long>
    ): PageBeanIssueTypeScreenSchemesProjects

    /**
     * GET /rest/api/3/issuetypescreenscheme
     *
     * Returns a [paginated](#pagination) list of issue type screen schemes.

    Only issue type screen schemes used in classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param id The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. (optional) (example: null)
     * @param queryString String used to perform a case-insensitive partial match with issue type screen scheme name. (optional) (example: null)
     * @param orderBy [Order](#ordering) the results by a field:

     *  `name` Sorts by issue type screen scheme name.
     *  `id` Sorts by issue type screen scheme ID. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to. (optional) (example: null)
     *
     * @return PageBeanIssueTypeScreenScheme
     */
    @GET("/rest/api/3/issuetypescreenscheme")
    suspend fun getIssueTypeScreenSchemes(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("id") id: List<Long>? = null,
        @Query("queryString") queryString: String = "",
        @Query("orderBy") orderBy: String = "id",
        @Query("expand") expand: String = ""
    ): PageBeanIssueTypeScreenScheme

    /**
     * GET /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project
     *
     * Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.

    Only company-managed projects associated with an issue type screen scheme are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme.  (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param query null (optional) (example: null)
     *
     * @return PageBeanProjectDetails
     */
    @GET("/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project")
    suspend fun getProjectsForIssueTypeScreenScheme(
        @Body issueTypeScreenSchemeId: Long,
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("query") query: String = ""
    ): PageBeanProjectDetails

    /**
     * POST /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove
     *
     * Removes issue type to screen scheme mappings from an issue type screen scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme.  (example: null)
     * @param issueTypeIds, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove")
    suspend fun removeMappingsFromIssueTypeScreenScheme(
        @Body issueTypeScreenSchemeId: String,
        @Body issueTypeIds: IssueTypeIds
    ): Unit
}