/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.ChangedWorklogs
import jira.api.models.PageOfWorklogs
import jira.api.models.Worklog
import jira.api.models.WorklogIdsRequestBean
import jira.api.models.WorklogsMoveRequestBean
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface IssueWorklogsApi {

    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/worklog
     *
     * Adds a worklog to an issue.

    Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key the issue.  (example: null)
     * @param notifyUsers Whether users watching the issue are notified by email. (optional) (example: null)
     * @param adjustEstimate Defines how to update the issue's time estimate, the options are:

     *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
     *  `leave` Leaves the estimate unchanged.
     *  `manual` Reduces the estimate by amount specified in `reduceBy`.
     *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog. (optional) (example: null)
     * @param newEstimate The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`. (optional) (example: null)
     * @param reduceBy The amount to reduce the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required when `adjustEstimate` is `manual`. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties. (optional) (example: null)
     * @param overrideEditableFlag Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag. (optional) (example: null)
     * @param worklog, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issue/{issueIdOrKey}/worklog")
    suspend fun addWorklog(
        @Body issueIdOrKey: String,
        @Query("notifyUsers") notifyUsers: Boolean = true,
        @Query("adjustEstimate") adjustEstimate: String = "auto",
        @Query("newEstimate") newEstimate: String? = null,
        @Query("reduceBy") reduceBy: String? = null,
        @Query("expand") expand: String = "",
        @Query("overrideEditableFlag") overrideEditableFlag: Boolean = false,
        @Body worklog: Worklog
    ): Unit

    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/worklog/move
     *
     * Moves a list of worklogs from one issue to another. This is an experimental API with several limitations:

     *  You can't move more than 5000 worklogs at once.
     *  You can't move worklogs containing an attachment.
     *  You can't move worklogs restricted by project roles.
     *  No notifications will be sent for moved worklogs.
     *  No webhooks or events will be sent for moved worklogs.
     *  No issue history will be recorded for moved worklogs.

    Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the projects containing the source and destination issues.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *Delete all worklogs*[ and *Edit all worklogs*](https://confluence.atlassian.com/x/yodKLg)[project permission](https://confluence.atlassian.com/x/yodKLg)
     *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param issueIdOrKey null  (example: null)
     * @param adjustEstimate Defines how to update the issues' time estimate, the options are:

     *  `leave` Leaves the estimate unchanged.
     *  `auto` Reduces the estimate by the aggregate value of `timeSpent` across all worklogs being moved in the source issue, and increases it in the destination issue. (optional) (example: null)
     * @param overrideEditableFlag Whether the work log entry should be moved to and from the issues even if the issues are not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag. (optional) (example: null)
     * @param worklogsMoveRequestBean, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issue/{issueIdOrKey}/worklog/move")
    suspend fun bulkMoveWorklogs(
        @Body issueIdOrKey: String,
        @Query("adjustEstimate") adjustEstimate: String = "auto",
        @Query("overrideEditableFlag") overrideEditableFlag: Boolean = false,
        @Body worklogsMoveRequestBean: WorklogsMoveRequestBean
    ): Unit

    /**
     * GET /rest/api/3/worklog/deleted
     *
     * Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.

    This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.

    This resource does not return worklogs deleted during the minute preceding the request.

     **[Permissions](#permissions) required:** Permission to access Jira.
     * @param since The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned. (optional) (example: null)
     *
     * @return ChangedWorklogs
     */
    @GET("/rest/api/3/worklog/deleted")
    suspend fun getIdsOfWorklogsDeletedSince(
        @Query("since") since: Long = 0
    ): ChangedWorklogs

    /**
     * GET /rest/api/3/worklog/updated
     *
     * Returns a list of IDs and update timestamps for worklogs updated after a date and time.

    This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.

    This resource does not return worklogs updated during the minute preceding the request.

     **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:

     *  the worklog is set as *Viewable by All Users*.
     *  the user is a member of a project role or group with permission to view the worklog.
     * @param since The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog. (optional) (example: null)
     *
     * @return ChangedWorklogs
     */
    @GET("/rest/api/3/worklog/updated")
    suspend fun getIdsOfWorklogsModifiedSince(
        @Query("since") since: Long = 0,
        @Query("expand") expand: String = ""
    ): ChangedWorklogs

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/worklog
     *
     * Returns worklogs for an issue (ordered by created time), starting from the oldest worklog or from the worklog started on or after a date and time.

    Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** Workloads are only returned where the user has:

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param startedAfter The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned. (optional) (example: null)
     * @param startedBefore The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties. (optional) (example: null)
     *
     * @return PageOfWorklogs
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/worklog")
    suspend fun getIssueWorklog(
        @Body issueIdOrKey: String,
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 5000,
        @Query("startedAfter") startedAfter: Long? = null,
        @Query("startedBefore") startedBefore: Long? = null,
        @Query("expand") expand: String = ""
    ): PageOfWorklogs

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/worklog/{id}
     *
     * Returns a worklog.

    Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param id The ID of the worklog.  (example: null)
     * @param expand Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts

    `properties`, which returns worklog properties. (optional) (example: null)
     *
     * @return Worklog
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/worklog/{id}")
    suspend fun getWorklog(
        @Body issueIdOrKey: String,
        @Body id: String,
        @Query("expand") expand: String = ""
    ): Worklog

    /**
     * POST /rest/api/3/worklog/list
     *
     * Returns worklog details for a list of worklog IDs.

    The returned list of worklogs is limited to 1000 items.

     **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:

     *  the worklog is set as *Viewable by All Users*.
     *  the user is a member of a project role or group with permission to view the worklog.
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog. (optional) (example: null)
     * @param worklogIdsRequestBean, request body
     *
     * @return List<Worklog>
     */
    @POST("/rest/api/3/worklog/list")
    suspend fun getWorklogsForIds(
        @Query("expand") expand: String = "",
        @Body worklogIdsRequestBean: WorklogIdsRequestBean
    ): List<Worklog>
}