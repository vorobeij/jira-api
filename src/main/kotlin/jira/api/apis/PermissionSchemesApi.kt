/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.PermissionGrant
import jira.api.models.PermissionGrants
import jira.api.models.PermissionScheme
import jira.api.models.PermissionSchemes
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface PermissionSchemesApi {

    /**
     * POST /rest/api/3/permissionscheme/{schemeId}/permission
     *
     * Creates a permission grant in a permission scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the permission scheme in which to create a new permission grant.  (example: null)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:

     *  `permissions` Returns all permission grants for each permission scheme.
     *  `user` Returns information about the user who is granted the permission.
     *  `group` Returns information about the group that is granted the permission.
     *  `projectRole` Returns information about the project role granted the permission.
     *  `field` Returns information about the custom field granted the permission.
     *  `all` Returns all expandable information. (optional) (example: null)
     * @param permissionGrant, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/permissionscheme/{schemeId}/permission")
    suspend fun createPermissionGrant(
        @Body schemeId: Long,
        @Query("expand") expand: String? = null,
        @Body permissionGrant: PermissionGrant
    ): Unit

    /**
     * POST /rest/api/3/permissionscheme
     *
     * Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:

     *  `all` Returns all expandable information.
     *  `field` Returns information about the custom field granted the permission.
     *  `group` Returns information about the group that is granted the permission.
     *  `permissions` Returns all permission grants for each permission scheme.
     *  `projectRole` Returns information about the project role granted the permission.
     *  `user` Returns information about the user who is granted the permission. (optional) (example: null)
     * @param permissionScheme, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/permissionscheme")
    suspend fun createPermissionScheme(
        @Query("expand") expand: String? = null,
        @Body permissionScheme: PermissionScheme
    ): Unit

    /**
     * GET /rest/api/3/permissionscheme
     *
     * Returns all permission schemes.

    ### About permission schemes and grants ###

    A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.

    #### Holder object ####

    The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.

    The `holder` object is defined by the following properties:

     *  `type` Identifies the user or group (see the list of types below).
     *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
     *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`

    The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):

     *  `anyone` Grant for anonymous users.
     *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
     *  `assignee` Grant for the user currently assigned to an issue.
     *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
     *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
     *  `projectLead` Grant for a project lead.
     *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
     *  `reporter` Grant for the user who reported the issue.
     *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
     *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).
     *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).

    #### Built-in permissions ####

    The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.

     **Project permissions**

     *  `ADMINISTER_PROJECTS`
     *  `BROWSE_PROJECTS`
     *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
     *  `SERVICEDESK_AGENT` (Jira Service Desk only)
     *  `VIEW_DEV_TOOLS` (Jira Software only)
     *  `VIEW_READONLY_WORKFLOW`

     **Issue permissions**

     *  `ASSIGNABLE_USER`
     *  `ASSIGN_ISSUES`
     *  `CLOSE_ISSUES`
     *  `CREATE_ISSUES`
     *  `DELETE_ISSUES`
     *  `EDIT_ISSUES`
     *  `LINK_ISSUES`
     *  `MODIFY_REPORTER`
     *  `MOVE_ISSUES`
     *  `RESOLVE_ISSUES`
     *  `SCHEDULE_ISSUES`
     *  `SET_ISSUE_SECURITY`
     *  `TRANSITION_ISSUES`

     **Voters and watchers permissions**

     *  `MANAGE_WATCHERS`
     *  `VIEW_VOTERS_AND_WATCHERS`

     **Comments permissions**

     *  `ADD_COMMENTS`
     *  `DELETE_ALL_COMMENTS`
     *  `DELETE_OWN_COMMENTS`
     *  `EDIT_ALL_COMMENTS`
     *  `EDIT_OWN_COMMENTS`

     **Attachments permissions**

     *  `CREATE_ATTACHMENTS`
     *  `DELETE_ALL_ATTACHMENTS`
     *  `DELETE_OWN_ATTACHMENTS`

     **Time tracking permissions**

     *  `DELETE_ALL_WORKLOGS`
     *  `DELETE_OWN_WORKLOGS`
     *  `EDIT_ALL_WORKLOGS`
     *  `EDIT_OWN_WORKLOGS`
     *  `WORK_ON_ISSUES`

     **[Permissions](#permissions) required:** Permission to access Jira.
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:

     *  `all` Returns all expandable information.
     *  `field` Returns information about the custom field granted the permission.
     *  `group` Returns information about the group that is granted the permission.
     *  `permissions` Returns all permission grants for each permission scheme.
     *  `projectRole` Returns information about the project role granted the permission.
     *  `user` Returns information about the user who is granted the permission. (optional) (example: null)
     *
     * @return PermissionSchemes
     */
    @GET("/rest/api/3/permissionscheme")
    suspend fun getAllPermissionSchemes(
        @Query("expand") expand: String? = null
    ): PermissionSchemes

    /**
     * GET /rest/api/3/permissionscheme/{schemeId}
     *
     * Returns a permission scheme.

     **[Permissions](#permissions) required:** Permission to access Jira.
     * @param schemeId The ID of the permission scheme to return.  (example: null)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:

     *  `all` Returns all expandable information.
     *  `field` Returns information about the custom field granted the permission.
     *  `group` Returns information about the group that is granted the permission.
     *  `permissions` Returns all permission grants for each permission scheme.
     *  `projectRole` Returns information about the project role granted the permission.
     *  `user` Returns information about the user who is granted the permission. (optional) (example: null)
     *
     * @return PermissionScheme
     */
    @GET("/rest/api/3/permissionscheme/{schemeId}")
    suspend fun getPermissionScheme(
        @Body schemeId: Long,
        @Query("expand") expand: String? = null
    ): PermissionScheme

    /**
     * GET /rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}
     *
     * Returns a permission grant.

     **[Permissions](#permissions) required:** Permission to access Jira.
     * @param schemeId The ID of the permission scheme.  (example: null)
     * @param permissionId The ID of the permission grant.  (example: null)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:

     *  `all` Returns all expandable information.
     *  `field` Returns information about the custom field granted the permission.
     *  `group` Returns information about the group that is granted the permission.
     *  `permissions` Returns all permission grants for each permission scheme.
     *  `projectRole` Returns information about the project role granted the permission.
     *  `user` Returns information about the user who is granted the permission. (optional) (example: null)
     *
     * @return PermissionGrant
     */
    @GET("/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}")
    suspend fun getPermissionSchemeGrant(
        @Body schemeId: Long,
        @Body permissionId: Long,
        @Query("expand") expand: String? = null
    ): PermissionGrant

    /**
     * GET /rest/api/3/permissionscheme/{schemeId}/permission
     *
     * Returns all permission grants for a permission scheme.

     **[Permissions](#permissions) required:** Permission to access Jira.
     * @param schemeId The ID of the permission scheme.  (example: null)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:

     *  `permissions` Returns all permission grants for each permission scheme.
     *  `user` Returns information about the user who is granted the permission.
     *  `group` Returns information about the group that is granted the permission.
     *  `projectRole` Returns information about the project role granted the permission.
     *  `field` Returns information about the custom field granted the permission.
     *  `all` Returns all expandable information. (optional) (example: null)
     *
     * @return PermissionGrants
     */
    @GET("/rest/api/3/permissionscheme/{schemeId}/permission")
    suspend fun getPermissionSchemeGrants(
        @Body schemeId: Long,
        @Query("expand") expand: String? = null
    ): PermissionGrants
}