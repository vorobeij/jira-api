/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.ArchiveIssueAsyncRequest
import jira.api.models.BulkChangelogRequestBean
import jira.api.models.BulkChangelogResponseBean
import jira.api.models.BulkFetchIssueRequestBean
import jira.api.models.BulkIssueResults
import jira.api.models.IssueBean
import jira.api.models.IssueChangelogIds
import jira.api.models.IssueCreateMetadata
import jira.api.models.IssueEvent
import jira.api.models.IssueLimitReportRequest
import jira.api.models.IssueLimitReportResponseBean
import jira.api.models.IssueUpdateDetails
import jira.api.models.IssueUpdateMetadata
import jira.api.models.IssuesUpdateBean
import jira.api.models.Notification
import jira.api.models.PageBeanChangelog
import jira.api.models.PageOfChangelogs
import jira.api.models.PageOfCreateMetaIssueTypeWithField
import jira.api.models.PageOfCreateMetaIssueTypes
import jira.api.models.Transitions
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface IssuesApi {

    /**
     * POST /rest/api/3/issue/archive
     *
     * Enables admins to archive up to 100,000 issues in a single request using JQL, returning the URL to check the status of the submitted request.

    You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) and [cancel task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post) APIs to manage the request.

     **Note that:**

     *  you can't archive subtasks directly, only through their parent issues
     *  you can only archive issues from software, service management, and business projects

     **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)

     **License required:** Premium or Enterprise

     **Signed-in users only:** This API can't be accessed anonymously.

     **Rate limiting:** Only a single request per jira instance can be active at any given time.



     * @param archiveIssueAsyncRequest, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issue/archive")
    suspend fun archiveIssuesAsync(
        @Body archiveIssueAsyncRequest: ArchiveIssueAsyncRequest
    ): Unit

    /**
     * POST /rest/api/3/issue/bulkfetch
     *
     * Returns the details for a set of requested issues. You can request up to 100 issues.

    Each issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned.

    Issues will be returned in ascending `id` order. If there are errors, Jira will return a list of issues which couldn't be fetched along with error messages.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** Issues are included in the response where the user has:

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param bulkFetchIssueRequestBean, request body
     *
     * @return BulkIssueResults
     */
    @POST("/rest/api/3/issue/bulkfetch")
    suspend fun bulkFetchIssues(
        @Body bulkFetchIssueRequestBean: BulkFetchIssueRequestBean
    ): BulkIssueResults

    /**
     * POST /rest/api/3/issue
     *
     * Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.

    The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.

    Creating a subtask differs from creating an issue as follows:

     *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
     *  `parent` must contain the ID or key of the parent issue.

    In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.

     **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
     * @param updateHistory Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen. (optional) (example: null)
     * @param issueUpdateDetails, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issue")
    suspend fun createIssue(
        @Query("updateHistory") updateHistory: Boolean = false,
        @Body issueUpdateDetails: IssueUpdateDetails
    ): Unit

    /**
     * POST /rest/api/3/issue/bulk
     *
     * Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.

    The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.

    Creating a subtask differs from creating an issue as follows:

     *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
     *  `parent` the must contain the ID or key of the parent issue.

     **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.
     * @param issuesUpdateBean, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issue/bulk")
    suspend fun createIssues(
        @Body issuesUpdateBean: IssuesUpdateBean
    ): Unit

    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/transitions
     *
     * Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.

    sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param issueUpdateDetails, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issue/{issueIdOrKey}/transitions")
    suspend fun doTransition(
        @Body issueIdOrKey: String,
        @Body issueUpdateDetails: IssueUpdateDetails
    ): Unit

    /**
     * POST /rest/api/3/changelog/bulkfetch
     *
     * Bulk fetch changelogs for multiple issues and filter by fields

    Returns a paginated list of all changelogs for given issues sorted by changelog date and issue IDs, starting from the oldest changelog and smallest issue ID.

    Issues are identified by their ID or key, and optionally changelogs can be filtered by their field IDs. You can request the changelogs of up to 1000 issues and can filter them by up to 10 field IDs.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the projects that the issues are in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issues.
     * @param bulkChangelogRequestBean, request body
     *
     * @return BulkChangelogResponseBean
     */
    @POST("/rest/api/3/changelog/bulkfetch")
    suspend fun getBulkChangelogs(
        @Body bulkChangelogRequestBean: BulkChangelogRequestBean
    ): BulkChangelogResponseBean

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/changelog
     *
     * Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     *
     * @return PageBeanChangelog
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/changelog")
    suspend fun getChangeLogs(
        @Body issueIdOrKey: String,
        @Query("startAt") startAt: Int = 0,
        @Query("maxResults") maxResults: Int = 100
    ): PageBeanChangelog

    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/changelog/list
     *
     * Returns changelogs for an issue specified by a list of changelog IDs.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param issueChangelogIds, request body
     *
     * @return PageOfChangelogs
     */
    @POST("/rest/api/3/issue/{issueIdOrKey}/changelog/list")
    suspend fun getChangeLogsByIds(
        @Body issueIdOrKey: String,
        @Body issueChangelogIds: IssueChangelogIds
    ): PageOfChangelogs

    /**
     * GET /rest/api/3/issue/createmeta
     *
     * Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).

    Deprecated, see [Create Issue Meta Endpoint Deprecation Notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304).

    The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     * @param projectIds List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`. (optional) (example: null)
     * @param projectKeys List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`. (optional) (example: null)
     * @param issuetypeIds List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`. (optional) (example: null)
     * @param issuetypeNames List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post). (optional) (example: null)
     *
     * @return IssueCreateMetadata
     */
    @GET("/rest/api/3/issue/createmeta")
    suspend fun getCreateIssueMeta(
        @Query("projectIds") projectIds: List<String>? = null,
        @Query("projectKeys") projectKeys: List<String>? = null,
        @Query("issuetypeIds") issuetypeIds: List<String>? = null,
        @Query("issuetypeNames") issuetypeNames: List<String>? = null,
        @Query("expand") expand: String? = null
    ): IssueCreateMetadata

    /**
     * GET /rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId}
     *
     * Returns a page of field metadata for a specified project and issuetype id. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     * @param projectIdOrKey The ID or key of the project.  (example: null)
     * @param issueTypeId The issuetype ID.  (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     *
     * @return PageOfCreateMetaIssueTypeWithField
     */
    @GET("/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId}")
    suspend fun getCreateIssueMetaIssueTypeId(
        @Body projectIdOrKey: String,
        @Body issueTypeId: String,
        @Query("startAt") startAt: Int = 0,
        @Query("maxResults") maxResults: Int = 50
    ): PageOfCreateMetaIssueTypeWithField

    /**
     * GET /rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes
     *
     * Returns a page of issue type metadata for a specified project. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     * @param projectIdOrKey The ID or key of the project.  (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     *
     * @return PageOfCreateMetaIssueTypes
     */
    @GET("/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes")
    suspend fun getCreateIssueMetaIssueTypes(
        @Body projectIdOrKey: String,
        @Query("startAt") startAt: Int = 0,
        @Query("maxResults") maxResults: Int = 50
    ): PageOfCreateMetaIssueTypes

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/editmeta
     *
     * Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).

    This endpoint will check for these conditions:

    1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.
    2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.
    3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.
    4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.
    5.  Issue has a project, issue type, and status defined.
    6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.
    7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.
    8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).
    9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.

    Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.

    Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:

     *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).
     *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

    Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param overrideScreenSecurity Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional) (example: null)
     * @param overrideEditableFlag Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional) (example: null)
     *
     * @return IssueUpdateMetadata
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/editmeta")
    suspend fun getEditIssueMeta(
        @Body issueIdOrKey: String,
        @Query("overrideScreenSecurity") overrideScreenSecurity: Boolean = false,
        @Query("overrideEditableFlag") overrideEditableFlag: Boolean = false
    ): IssueUpdateMetadata

    /**
     * GET /rest/api/3/events
     *
     * Returns all issue events.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return List<IssueEvent>
     */
    @GET("/rest/api/3/events")
    suspend fun getEvents(): List<IssueEvent>

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}
     *
     * Returns the details for an issue.

    The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param fields A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:

     *  `*all` Returns all fields.
     *  `*navigable` Returns navigable fields.
     *  Any issue field, prefixed with a minus to exclude.

    Examples:

     *  `summary,comment` Returns only the summary and comments fields.
     *  `-description` Returns all (default) fields except description.
     *  `*navigable,-comment` Returns all navigable fields except comment.

    This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.

    Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields. (optional) (example: null)
     * @param fieldsByKeys Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `renderedFields` Returns field values rendered in HTML format.
     *  `names` Returns the display name of each field.
     *  `schema` Returns the schema describing a field type.
     *  `transitions` Returns all possible transitions for the issue.
     *  `editmeta` Returns information about how each field can be edited.
     *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
     *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored. (optional) (example: null)
     * @param properties A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:

     *  `*all` Returns all issue properties.
     *  Any issue property key, prefixed with a minus to exclude.

    Examples:

     *  `*all` Returns all properties.
     *  `*all,-prop1` Returns all properties except `prop1`.
     *  `prop1,prop2` Returns `prop1` and `prop2` properties.

    This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`. (optional) (example: null)
     * @param updateHistory Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field. (optional) (example: null)
     * @param failFast Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s). (optional) (example: null)
     *
     * @return IssueBean
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}")
    suspend fun getIssue(
        @Body issueIdOrKey: String,
        @Query("fields") fields: List<String>? = null,
        @Query("fieldsByKeys") fieldsByKeys: Boolean = false,
        @Query("expand") expand: String? = null,
        @Query("properties") properties: List<String>? = null,
        @Query("updateHistory") updateHistory: Boolean = false,
        @Query("failFast") failFast: Boolean = false
    ): IssueBean

    /**
     * GET /rest/api/3/issue/limit/report
     *
     * Returns all issues breaching and approaching per-issue limits.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) is required for the project the issues are in. Results may be incomplete otherwise
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param isReturningKeys Return issue keys instead of issue ids in the response.

    Usage: Add `?isReturningKeys=true` to the end of the path to request issue keys. (optional) (example: null)
     * @param issueLimitReportRequest, request body
     *
     * @return IssueLimitReportResponseBean
     */
    @GET("/rest/api/3/issue/limit/report")
    suspend fun getIssueLimitReport(
        @Query("isReturningKeys") isReturningKeys: Boolean = false,
        @Body issueLimitReportRequest: IssueLimitReportRequest
    ): IssueLimitReportResponseBean

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/transitions
     *
     * Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.

    Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required: A list or transition is returned only when the user has:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

    However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param expand Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post). (optional) (example: null)
     * @param transitionId The ID of the transition. (optional) (example: null)
     * @param skipRemoteOnlyCondition Whether transitions with the condition *Hide From User Condition* are included in the response. (optional) (example: null)
     * @param includeUnavailableTransitions Whether details of transitions that fail a condition are included in the response (optional) (example: null)
     * @param sortByOpsBarAndStatus Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value. (optional) (example: null)
     *
     * @return Transitions
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/transitions")
    suspend fun getTransitions(
        @Body issueIdOrKey: String,
        @Query("expand") expand: String? = null,
        @Query("transitionId") transitionId: String? = null,
        @Query("skipRemoteOnlyCondition") skipRemoteOnlyCondition: Boolean = false,
        @Query("includeUnavailableTransitions") includeUnavailableTransitions: Boolean = false,
        @Query("sortByOpsBarAndStatus") sortByOpsBarAndStatus: Boolean = false
    ): Transitions

    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/notify
     *
     * Creates an email notification for an issue and adds it to the mail queue.

     **[Permissions](#permissions) required:**

     *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey ID or key of the issue that the notification is sent for.  (example: null)
     * @param notification, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issue/{issueIdOrKey}/notify")
    suspend fun notify(
        @Body issueIdOrKey: String,
        @Body notification: Notification
    ): Unit
}