/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.DefaultWorkflow
import jira.api.models.IssueTypeWorkflowMapping
import jira.api.models.IssueTypesWorkflowMapping
import jira.api.models.PageBeanWorkflowScheme
import jira.api.models.WorkflowScheme
import jira.api.models.WorkflowSchemeReadRequest
import jira.api.models.WorkflowSchemeReadResponse
import jira.api.models.WorkflowSchemeUpdateRequest
import jira.api.models.WorkflowSchemeUpdateRequiredMappingsRequest
import jira.api.models.WorkflowSchemeUpdateRequiredMappingsResponse
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface WorkflowSchemesApi {

    /**
     * POST /rest/api/3/workflowscheme
     *
     * Creates a workflow scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param workflowScheme, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/workflowscheme")
    suspend fun createWorkflowScheme(
        @Body workflowScheme: WorkflowScheme
    ): Unit

    /**
     * GET /rest/api/3/workflowscheme
     *
     * Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     *
     * @return PageBeanWorkflowScheme
     */
    @GET("/rest/api/3/workflowscheme")
    suspend fun getAllWorkflowSchemes(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50
    ): PageBeanWorkflowScheme

    /**
     * GET /rest/api/3/workflowscheme/{id}/default
     *
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.  (example: null)
     * @param returnDraftIfExists Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned. (optional) (example: null)
     *
     * @return DefaultWorkflow
     */
    @GET("/rest/api/3/workflowscheme/{id}/default")
    suspend fun getDefaultWorkflow(
        @Body id: Long,
        @Query("returnDraftIfExists") returnDraftIfExists: Boolean = false
    ): DefaultWorkflow

    /**
     * GET /rest/api/3/workflowscheme/{id}/workflow
     *
     * Returns the workflow-issue type mappings for a workflow scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.  (example: null)
     * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. (optional) (example: null)
     * @param returnDraftIfExists Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. (optional) (example: null)
     *
     * @return IssueTypesWorkflowMapping
     */
    @GET("/rest/api/3/workflowscheme/{id}/workflow")
    suspend fun getWorkflow(
        @Body id: Long,
        @Query("workflowName") workflowName: String? = null,
        @Query("returnDraftIfExists") returnDraftIfExists: Boolean = false
    ): IssueTypesWorkflowMapping

    /**
     * GET /rest/api/3/workflowscheme/{id}
     *
     * Returns a workflow scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.  (example: null)
     * @param returnDraftIfExists Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned. (optional) (example: null)
     *
     * @return WorkflowScheme
     */
    @GET("/rest/api/3/workflowscheme/{id}")
    suspend fun getWorkflowScheme(
        @Body id: Long,
        @Query("returnDraftIfExists") returnDraftIfExists: Boolean = false
    ): WorkflowScheme

    /**
     * GET /rest/api/3/workflowscheme/{id}/issuetype/{issueType}
     *
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.  (example: null)
     * @param issueType The ID of the issue type.  (example: null)
     * @param returnDraftIfExists Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. (optional) (example: null)
     *
     * @return IssueTypeWorkflowMapping
     */
    @GET("/rest/api/3/workflowscheme/{id}/issuetype/{issueType}")
    suspend fun getWorkflowSchemeIssueType(
        @Body id: Long,
        @Body issueType: String,
        @Query("returnDraftIfExists") returnDraftIfExists: Boolean = false
    ): IssueTypeWorkflowMapping

    /**
     * POST /rest/api/3/workflowscheme/read
     *
     * Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.

     **[Permissions](#permissions) required:**

     *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes
     *  *Administer projects* project permissions to access project-scoped workflow schemes
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `workflows.usages` Returns the project and issue types that each workflow in the workflow scheme is associated with. (optional) (example: null)
     * @param workflowSchemeReadRequest, request body
     *
     * @return List<WorkflowSchemeReadResponse>
     */
    @POST("/rest/api/3/workflowscheme/read")
    suspend fun readWorkflowSchemes(
        @Query("expand") expand: String? = null,
        @Body workflowSchemeReadRequest: WorkflowSchemeReadRequest
    ): List<WorkflowSchemeReadResponse>

    /**
     * POST /rest/api/3/workflowscheme/update
     *
     * Updates company-managed and team-managed project workflow schemes. This API doesn't have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.

     **[Permissions](#permissions) required:**

     *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.
     *  *Administer projects* project permission to update project-scoped workflow schemes.
     * @param workflowSchemeUpdateRequest, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/workflowscheme/update")
    suspend fun updateSchemes(
        @Body workflowSchemeUpdateRequest: WorkflowSchemeUpdateRequest
    ): Unit

    /**
     * POST /rest/api/3/workflowscheme/update/mappings
     *
     * Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.

     **[Permissions](#permissions) required:**

     *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.
     *  *Administer projects* project permission to update project-scoped workflow schemes.
     * @param workflowSchemeUpdateRequiredMappingsRequest, request body
     *
     * @return WorkflowSchemeUpdateRequiredMappingsResponse
     */
    @POST("/rest/api/3/workflowscheme/update/mappings")
    suspend fun updateWorkflowSchemeMappings(
        @Body workflowSchemeUpdateRequiredMappingsRequest: WorkflowSchemeUpdateRequiredMappingsRequest
    ): WorkflowSchemeUpdateRequiredMappingsResponse
}