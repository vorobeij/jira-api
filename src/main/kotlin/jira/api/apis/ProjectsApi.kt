/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.*
import retrofit2.http.*

interface ProjectsApi {

    /**
     * POST /rest/api/3/project/{projectIdOrKey}/archive
     *
     * Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive).  (example: null)
     *
     * @return Unit
     */
    @POST("/rest/api/3/project/{projectIdOrKey}/archive")
    suspend fun archiveProject(
        @Body projectIdOrKey: String
    ): Unit

    /**
     * POST /rest/api/3/project
     *
     * Creates a project based on a project type template, as shown in the following table:

    | Project Type Key | Project Template Key |
    |--|--|
    | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |
    | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |
    | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |
    The project types are available according to the installed Jira features as follows:

     *  Jira Core, the default, enables `business` projects.
     *  Jira Service Management enables `service_desk` projects.
     *  Jira Software enables `software` projects.

    To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param createProjectDetails, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/project")
    suspend fun createProject(
        @Body createProjectDetails: CreateProjectDetails
    ): Unit

    /**
     * POST /rest/api/3/project/{projectIdOrKey}/delete
     *
     * Deletes a project asynchronously.

    This operation is:

     *  transactional, that is, if part of the delete fails the project is not deleted.
     *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive).  (example: null)
     *
     * @return Unit
     */
    @POST("/rest/api/3/project/{projectIdOrKey}/delete")
    suspend fun deleteProjectAsynchronously(
        @Body projectIdOrKey: String
    ): Unit

    /**
     * GET /rest/api/3/project
     *
     * Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:

     *  `description` Returns the project description.
     *  `issueTypes` Returns all issue types associated with the project.
     *  `lead` Returns information about the project lead.
     *  `projectKeys` Returns all project keys associated with the project. (optional) (example: null)
     * @param recent Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session. (optional) (example: null)
     * @param properties A list of project properties to return for the project. This parameter accepts a comma-separated list. (optional) (example: null)
     *
     * @return List<Project>
     */
    @GET("/rest/api/3/project")
    suspend fun getAllProjects(
        @Query("expand") expand: String? = null,
        @Query("recent") recent: Int? = null,
        @Query("properties") properties: List<String>? = null
    ): List<Project>

    /**
     * GET /rest/api/3/project/{projectIdOrKey}/statuses
     *
     * Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive).  (example: null)
     *
     * @return List<IssueTypeWithStatus>
     */
    @GET("/rest/api/3/project/{projectIdOrKey}/statuses")
    suspend fun getAllStatuses(
        @Body projectIdOrKey: String
    ): List<IssueTypeWithStatus>

    /**
     * GET /rest/api/3/project/{projectId}/hierarchy
     *
     * Get the issue type hierarchy for a next-gen project.

    The issue type hierarchy for a project consists of:

     *  *Epic* at level 1 (optional).
     *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
     *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.

     **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectId The ID of the project.  (example: null)
     *
     * @return ProjectIssueTypeHierarchy
     */
    @GET("/rest/api/3/project/{projectId}/hierarchy")
    suspend fun getHierarchy(
        @Body projectId: Long
    ): ProjectIssueTypeHierarchy

    /**
     * GET /rest/api/3/project/{projectKeyOrId}/notificationscheme
     *
     * Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param projectKeyOrId The project ID or project key (case sensitive).  (example: null)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `all` Returns all expandable information
     *  `field` Returns information about any custom fields assigned to receive an event
     *  `group` Returns information about any groups assigned to receive an event
     *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
     *  `projectRole` Returns information about any project roles assigned to receive an event
     *  `user` Returns information about any users assigned to receive an event (optional) (example: null)
     *
     * @return NotificationScheme
     */
    @GET("/rest/api/3/project/{projectKeyOrId}/notificationscheme")
    suspend fun getNotificationSchemeForProject(
        @Body projectKeyOrId: String,
        @Query("expand") expand: String? = null
    ): NotificationScheme

    /**
     * GET /rest/api/3/project/{projectIdOrKey}
     *
     * Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive).  (example: null)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:

     *  `description` The project description.
     *  `issueTypes` The issue types associated with the project.
     *  `lead` The project lead.
     *  `projectKeys` All project keys associated with the project.
     *  `issueTypeHierarchy` The project issue type hierarchy. (optional) (example: null)
     * @param properties A list of project properties to return for the project. This parameter accepts a comma-separated list. (optional) (example: null)
     *
     * @return Project
     */
    @GET("/rest/api/3/project/{projectIdOrKey}")
    suspend fun getProject(
        @Body projectIdOrKey: String,
        @Query("expand") expand: String? = null,
        @Query("properties") properties: List<String>? = null
    ): Project

    /**
     * GET /rest/api/3/project/recent
     *
     * Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** Projects are returned only where the user has one of:

     *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:

     *  `description` Returns the project description.
     *  `projectKeys` Returns all project keys associated with a project.
     *  `lead` Returns information about the project lead.
     *  `issueTypes` Returns all issue types associated with the project.
     *  `url` Returns the URL associated with the project.
     *  `permissions` Returns the permissions associated with the project.
     *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
     *  `*` Returns the project with all available expand options. (optional) (example: null)
     * @param properties EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored. (optional) (example: null)
     *
     * @return List<Project>
     */
    @GET("/rest/api/3/project/recent")
    suspend fun getRecent(
        @Query("expand") expand: String? = null,
        @Query("properties") properties: List<StringList>? = null
    ): List<Project>

    /**
     * POST /rest/api/3/project/{projectIdOrKey}/restore
     *
     * Restores a project that has been archived or placed in the Jira recycle bin.

     **[Permissions](#permissions) required:**

     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.
     * @param projectIdOrKey The project ID or project key (case sensitive).  (example: null)
     *
     * @return Project
     */
    @POST("/rest/api/3/project/{projectIdOrKey}/restore")
    suspend fun restore(
        @Body projectIdOrKey: String
    ): Project

    /**
     * GET /rest/api/3/project/search
     *
     * Returns a [paginated](#pagination) list of projects visible to the user.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** Projects are returned only where the user has one of:

     *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param orderBy [Order](#ordering) the results by a field.

     *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).
     *  `issueCount` Sorts by the total number of issues in each project.
     *  `key` Sorts by project key.
     *  `lastIssueUpdatedTime` Sorts by the last issue update time.
     *  `name` Sorts by project name.
     *  `owner` Sorts by project lead.
     *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.
     *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date. (optional) (example: null)
     * @param id The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided. (optional) (example: null)
     * @param keys The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided. (optional) (example: null)
     * @param query Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive). (optional) (example: null)
     * @param typeKey Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`. (optional) (example: null)
     * @param categoryId The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. (optional) (example: null)
     * @param action Filter results by projects for which the user can:

     *  `view` the project, meaning that they have one of the following permissions:

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  `edit` the project, meaning that they have one of the following permissions:

     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  `create` the project, meaning that they have the *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue is created. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:

     *  `description` Returns the project description.
     *  `projectKeys` Returns all project keys associated with a project.
     *  `lead` Returns information about the project lead.
     *  `issueTypes` Returns all issue types associated with the project.
     *  `url` Returns the URL associated with the project.
     *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project. (optional) (example: null)
     * @param status EXPERIMENTAL. Filter results by project status:

     *  `live` Search live projects.
     *  `archived` Search archived projects.
     *  `deleted` Search deleted projects, those in the recycle bin. (optional) (example: null)
     * @param properties EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. (optional) (example: null)
     * @param propertyQuery EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`. (optional) (example: null)
     *
     * @return PageBeanProject
     */
    @GET("/rest/api/3/project/search")
    suspend fun searchProjects(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("orderBy") orderBy: String = "key",
        @Query("id") id: List<Long>? = null,
        @Query("keys") keys: List<String>? = null,
        @Query("query") query: String? = null,
        @Query("typeKey") typeKey: String? = null,
        @Query("categoryId") categoryId: Long? = null,
        @Query("action") action: String = "view",
        @Query("expand") expand: String? = null,
        @Query("status") status: List<String>? = null,
        @Query("properties") properties: List<StringList>? = null,
        @Query("propertyQuery") propertyQuery: String? = null
    ): PageBeanProject
}