/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.*
import retrofit2.http.*

interface DashboardsApi {

    /**
     * POST /rest/api/3/dashboard/{dashboardId}/gadget
     *
     * Adds a gadget to a dashboard.

     **[Permissions](#permissions) required:** None.
     * @param dashboardId The ID of the dashboard.  (example: null)
     * @param dashboardGadgetSettings, request body
     *
     * @return DashboardGadget
     */
    @POST("/rest/api/3/dashboard/{dashboardId}/gadget")
    suspend fun addGadget(
        @Body dashboardId: Long,
        @Body dashboardGadgetSettings: DashboardGadgetSettings
    ): DashboardGadget

    /**
     * POST /rest/api/3/dashboard/{id}/copy
     *
     * Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.

     **[Permissions](#permissions) required:** None

    The dashboard to be copied must be owned by or shared with the user.
     * @param id null  (example: null)
     * @param extendAdminPermissions Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) (optional) (example: null)
     * @param dashboardDetails, request body
     *
     * @return Dashboard
     */
    @POST("/rest/api/3/dashboard/{id}/copy")
    suspend fun copyDashboard(
        @Body id: String,
        @Query("extendAdminPermissions") extendAdminPermissions: Boolean = false,
        @Body dashboardDetails: DashboardDetails
    ): Dashboard

    /**
     * POST /rest/api/3/dashboard
     *
     * Creates a dashboard.

     **[Permissions](#permissions) required:** None.
     * @param extendAdminPermissions Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) (optional) (example: null)
     * @param dashboardDetails, request body
     *
     * @return Dashboard
     */
    @POST("/rest/api/3/dashboard")
    suspend fun createDashboard(
        @Query("extendAdminPermissions") extendAdminPermissions: Boolean = false,
        @Body dashboardDetails: DashboardDetails
    ): Dashboard

    /**
     * GET /rest/api/3/dashboard/gadgets
     *
     * Gets a list of all available gadgets that can be added to all dashboards.

     **[Permissions](#permissions) required:** None.
     *
     * @return AvailableDashboardGadgetsResponse
     */
    @GET("/rest/api/3/dashboard/gadgets")
    suspend fun getAllAvailableDashboardGadgets(): AvailableDashboardGadgetsResponse

    /**
     * GET /rest/api/3/dashboard
     *
     * Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** None.
     * @param filter The filter applied to the list of dashboards. Valid values are:

     *  `favourite` Returns dashboards the user has marked as favorite.
     *  `my` Returns dashboards owned by the user. (optional) (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     *
     * @return PageOfDashboards
     */
    @GET("/rest/api/3/dashboard")
    suspend fun getAllDashboards(
        @Query("filter") filter: String? = null,
        @Query("startAt") startAt: Int = 0,
        @Query("maxResults") maxResults: Int = 20
    ): PageOfDashboards

    /**
     * GET /rest/api/3/dashboard/{dashboardId}/gadget
     *
     * Returns a list of dashboard gadgets on a dashboard.

    This operation returns:

     *  Gadgets from a list of IDs, when `id` is set.
     *  Gadgets with a module key, when `moduleKey` is set.
     *  Gadgets from a list of URIs, when `uri` is set.
     *  All gadgets, when no other parameters are set.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** None.
     * @param dashboardId The ID of the dashboard.  (example: null)
     * @param moduleKey The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`. (optional) (example: null)
     * @param uri The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`. (optional) (example: null)
     * @param gadgetId The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`. (optional) (example: null)
     *
     * @return DashboardGadgetResponse
     */
    @GET("/rest/api/3/dashboard/{dashboardId}/gadget")
    suspend fun getAllGadgets(
        @Body dashboardId: Long,
        @Query("moduleKey") moduleKey: List<String>? = null,
        @Query("uri") uri: List<String>? = null,
        @Query("gadgetId") gadgetId: List<Long>? = null
    ): DashboardGadgetResponse

    /**
     * GET /rest/api/3/dashboard/{id}
     *
     * Returns a dashboard.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** None.

    However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     * @param id The ID of the dashboard.  (example: null)
     *
     * @return Dashboard
     */
    @GET("/rest/api/3/dashboard/{id}")
    suspend fun getDashboard(
        @Body id: String
    ): Dashboard

    /**
     * GET /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}
     *
     * Returns the key and value of a dashboard item property.

    A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).

    When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.

    There is no resource to set or get dashboard items.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.
     * @param dashboardId The ID of the dashboard.  (example: null)
     * @param itemId The ID of the dashboard item.  (example: null)
     * @param propertyKey The key of the dashboard item property.  (example: null)
     *
     * @return EntityProperty
     */
    @GET("/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}")
    suspend fun getDashboardItemProperty(
        @Body dashboardId: String,
        @Body itemId: String,
        @Body propertyKey: String
    ): EntityProperty

    /**
     * GET /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties
     *
     * Returns the keys of all properties for a dashboard item.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.
     * @param dashboardId The ID of the dashboard.  (example: null)
     * @param itemId The ID of the dashboard item.  (example: null)
     *
     * @return PropertyKeys
     */
    @GET("/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties")
    suspend fun getDashboardItemPropertyKeys(
        @Body dashboardId: String,
        @Body itemId: String
    ): PropertyKeys

    /**
     * GET /rest/api/3/dashboard/search
     *
     * Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:

     *  Dashboards owned by the user. Not returned for anonymous users.
     *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
     *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
     *  Dashboards shared with a public project.
     *  Dashboards shared with the public.
     * @param dashboardName String used to perform a case-insensitive partial match with `name`. (optional) (example: null)
     * @param accountId User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter. (optional) (example: null)
     * @param owner This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter. (optional) (example: null)
     * @param groupname As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter. (optional) (example: null)
     * @param groupId Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter. (optional) (example: null)
     * @param projectId Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`. (optional) (example: null)
     * @param orderBy [Order](#ordering) the results by a field:

     *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.
     *  `favourite_count` Sorts by dashboard popularity.
     *  `id` Sorts by dashboard ID.
     *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.
     *  `name` Sorts by dashboard name.
     *  `owner` Sorts by dashboard owner name. (optional) (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param status The status to filter by. It may be active, archived or deleted. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `description` Returns the description of the dashboard.
     *  `owner` Returns the owner of the dashboard.
     *  `viewUrl` Returns the URL that is used to view the dashboard.
     *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.
     *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.
     *  `sharePermissions` Returns details of the share permissions defined for the dashboard.
     *  `editPermissions` Returns details of the edit permissions defined for the dashboard.
     *  `isWritable` Returns whether the current user has permission to edit the dashboard. (optional) (example: null)
     *
     * @return PageBeanDashboard
     */
    @GET("/rest/api/3/dashboard/search")
    suspend fun getDashboardsPaginated(
        @Query("dashboardName") dashboardName: String? = null,
        @Query("accountId") accountId: String? = null,
        @Query("owner") owner: String? = null,
        @Query("groupname") groupname: String? = null,
        @Query("groupId") groupId: String? = null,
        @Query("projectId") projectId: Long? = null,
        @Query("orderBy") orderBy: String = "name",
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("status") status: String = "active",
        @Query("expand") expand: String? = null
    ): PageBeanDashboard
}