/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.RemoteIssueLink
import jira.api.models.RemoteIssueLinkIdentifies
import jira.api.models.RemoteIssueLinkRequest
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface IssueRemoteLinksApi {

    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/remotelink
     *
     * Creates or updates a remote issue link for an issue.

    If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.

    This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param remoteIssueLinkRequest, request body
     *
     * @return RemoteIssueLinkIdentifies
     */
    @POST("/rest/api/3/issue/{issueIdOrKey}/remotelink")
    suspend fun createOrUpdateRemoteIssueLink(
        @Body issueIdOrKey: String,
        @Body remoteIssueLinkRequest: RemoteIssueLinkRequest
    ): RemoteIssueLinkIdentifies

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}
     *
     * Returns a remote issue link for an issue.

    This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param linkId The ID of the remote issue link.  (example: null)
     *
     * @return RemoteIssueLink
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}")
    suspend fun getRemoteIssueLinkById(
        @Body issueIdOrKey: String,
        @Body linkId: String
    ): RemoteIssueLink

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/remotelink
     *
     * Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.

    This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue.  (example: 10000)
     * @param globalId The global ID of the remote issue link. (optional) (example: null)
     *
     * @return RemoteIssueLink
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/remotelink")
    suspend fun getRemoteIssueLinks(
        @Body issueIdOrKey: String,
        @Query("globalId") globalId: String? = null
    ): RemoteIssueLink
}