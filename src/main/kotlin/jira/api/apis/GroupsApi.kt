/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.AddGroupBean
import jira.api.models.FoundGroups
import jira.api.models.Group
import jira.api.models.PageBeanGroupDetails
import jira.api.models.PageBeanUserDetails
import jira.api.models.UpdateUserToGroupBean
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface GroupsApi {

    /**
     * POST /rest/api/3/group/user
     *
     * Adds a user to a group.

     **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param groupname As a group's name can change, use of `groupId` is recommended to identify a group.
    The name of the group. This parameter cannot be used with the `groupId` parameter. (optional) (example: null)
     * @param groupId The ID of the group. This parameter cannot be used with the `groupName` parameter. (optional) (example: null)
     * @param updateUserToGroupBean, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/group/user")
    suspend fun addUserToGroup(
        @Query("groupname") groupname: String? = null,
        @Query("groupId") groupId: String? = null,
        @Body updateUserToGroupBean: UpdateUserToGroupBean
    ): Unit

    /**
     * GET /rest/api/3/group/bulk
     *
     * Returns a [paginated](#pagination) list of groups.

     **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param groupId The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`. (optional) (example: 3571b9a7-348f-414a-9087-8e1ea03a7df8)
     * @param groupName The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`. (optional) (example: null)
     * @param accessType The access level of a group. Valid values: 'site-admin', 'admin', 'user'. (optional) (example: null)
     * @param applicationKey The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'. (optional) (example: null)
     *
     * @return PageBeanGroupDetails
     */
    @GET("/rest/api/3/group/bulk")
    suspend fun bulkGetGroups(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("groupId") groupId: List<String>? = null,
        @Query("groupName") groupName: List<String>? = null,
        @Query("accessType") accessType: String? = null,
        @Query("applicationKey") applicationKey: String? = null
    ): PageBeanGroupDetails

    /**
     * POST /rest/api/3/group
     *
     * Creates a group.

     **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param addGroupBean, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/group")
    suspend fun createGroup(
        @Body addGroupBean: AddGroupBean
    ): Unit

    /**
     * GET /rest/api/3/groups/picker
     *
     * Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.

    The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.

    The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.

     *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
     * @param accountId This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get). (optional) (example: null)
     * @param query The string to find in group names. (optional) (example: query)
     * @param exclude As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.
    A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter. (optional) (example: null)
     * @param excludeId A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter. (optional) (example: null)
     * @param maxResults The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`. (optional) (example: null)
     * @param caseInsensitive Whether the search for groups should be case insensitive. (optional) (example: null)
     * @param userName This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional) (example: null)
     *
     * @return FoundGroups
     */
    @GET("/rest/api/3/groups/picker")
    suspend fun findGroups(
        @Query("accountId") accountId: String? = null,
        @Query("query") query: String? = null,
        @Query("exclude") exclude: List<String>? = null,
        @Query("excludeId") excludeId: List<String>? = null,
        @Query("maxResults") maxResults: Int? = null,
        @Query("caseInsensitive") caseInsensitive: Boolean = false,
        @Query("userName") userName: String? = null
    ): FoundGroups

    /**
     * GET /rest/api/3/group
     *
     * This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).

    Returns all users in a group.

     **[Permissions](#permissions) required:** either of:

     *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param groupname As a group's name can change, use of `groupId` is recommended to identify a group.
    The name of the group. This parameter cannot be used with the `groupId` parameter. (optional) (example: null)
     * @param groupId The ID of the group. This parameter cannot be used with the `groupName` parameter. (optional) (example: null)
     * @param expand List of fields to expand. (optional) (example: null)
     *
     * @return Group
     */
    @GET("/rest/api/3/group")
    suspend fun getGroup(
        @Query("groupname") groupname: String? = null,
        @Query("groupId") groupId: String? = null,
        @Query("expand") expand: String? = null
    ): Group

    /**
     * GET /rest/api/3/group/member
     *
     * Returns a [paginated](#pagination) list of all users in a group.

    Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.

     **[Permissions](#permissions) required:** either of:

     *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param groupname As a group's name can change, use of `groupId` is recommended to identify a group.
    The name of the group. This parameter cannot be used with the `groupId` parameter. (optional) (example: null)
     * @param groupId The ID of the group. This parameter cannot be used with the `groupName` parameter. (optional) (example: null)
     * @param includeInactiveUsers Include inactive users. (optional) (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     *
     * @return PageBeanUserDetails
     */
    @GET("/rest/api/3/group/member")
    suspend fun getUsersFromGroup(
        @Query("groupname") groupname: String? = null,
        @Query("groupId") groupId: String? = null,
        @Query("includeInactiveUsers") includeInactiveUsers: Boolean = false,
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50
    ): PageBeanUserDetails
}