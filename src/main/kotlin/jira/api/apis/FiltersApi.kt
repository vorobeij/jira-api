/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.*
import retrofit2.http.*

interface FiltersApi {

    /**
     * POST /rest/api/3/filter
     *
     * Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.

     **[Permissions](#permissions) required:** Permission to access Jira.
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. (optional) (example: null)
     * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional) (example: null)
     * @param filter, request body
     *
     * @return Filter
     */
    @POST("/rest/api/3/filter")
    suspend fun createFilter(
        @Query("expand") expand: String? = null,
        @Query("overrideSharePermissions") overrideSharePermissions: Boolean = false,
        @Body filter: Filter
    ): Filter

    /**
     * GET /rest/api/3/filter/{id}/columns
     *
     * Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** None, however, column details are only returned for:

     *  filters owned by the user.
     *  filters shared with a group that the user is a member of.
     *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  filters shared with a public project.
     *  filters shared with the public.
     * @param id The ID of the filter.  (example: null)
     *
     * @return List<ColumnItem>
     */
    @GET("/rest/api/3/filter/{id}/columns")
    suspend fun getColumns(
        @Body id: Long
    ): List<ColumnItem>

    /**
     * GET /rest/api/3/filter/favourite
     *
     * Returns the visible favorite filters of the user.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:

     *  owned by the user.
     *  shared with a group that the user is a member of.
     *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  shared with a public project.
     *  shared with the public.

    For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. (optional) (example: null)
     *
     * @return List<Filter>
     */
    @GET("/rest/api/3/filter/favourite")
    suspend fun getFavouriteFilters(
        @Query("expand") expand: String? = null
    ): List<Filter>

    /**
     * GET /rest/api/3/filter/{id}
     *
     * Returns a filter.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:

     *  owned by the user.
     *  shared with a group that the user is a member of.
     *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  shared with a public project.
     *  shared with the public.
     * @param id The ID of the filter to return.  (example: null)
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. (optional) (example: null)
     * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional) (example: null)
     *
     * @return Filter
     */
    @GET("/rest/api/3/filter/{id}")
    suspend fun getFilter(
        @Body id: Long,
        @Query("expand") expand: String? = null,
        @Query("overrideSharePermissions") overrideSharePermissions: Boolean = false
    ): Filter

    /**
     * GET /rest/api/3/filter/search
     *
     * Returns a [paginated](#pagination) list of filters. Use this operation to get:

     *  specific filters, by defining `id` only.
     *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:

     *  filters owned by the user.
     *  filters shared with a group that the user is a member of.
     *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  filters shared with a public project.
     *  filters shared with the public.
     * @param filterName String used to perform a case-insensitive partial match with `name`. (optional) (example: null)
     * @param accountId User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`. (optional) (example: null)
     * @param owner This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`. (optional) (example: null)
     * @param groupname As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter. (optional) (example: null)
     * @param groupId Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter. (optional) (example: null)
     * @param projectId Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`. (optional) (example: null)
     * @param id The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs. (optional) (example: null)
     * @param orderBy [Order](#ordering) the results by a field:

     *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.
     *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.
     *  `is_favourite` Sorts by whether the filter is marked as a favorite.
     *  `id` Sorts by filter ID.
     *  `name` Sorts by filter name.
     *  `owner` Sorts by the ID of the filter owner.
     *  `is_shared` Sorts by whether the filter is shared. (optional) (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `description` Returns the description of the filter.
     *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.
     *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.
     *  `jql` Returns the JQL query that the filter uses.
     *  `owner` Returns the owner of the filter.
     *  `searchUrl` Returns a URL to perform the filter's JQL query.
     *  `sharePermissions` Returns the share permissions defined for the filter.
     *  `editPermissions` Returns the edit permissions defined for the filter.
     *  `isWritable` Returns whether the current user has permission to edit the filter.
     *  `approximateLastUsed` \[Experimental\] Returns the approximate date and time when the filter was last evaluated.
     *  `subscriptions` Returns the users that are subscribed to the filter.
     *  `viewUrl` Returns a URL to view the filter. (optional) (example: null)
     * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional) (example: null)
     * @param isSubstringMatch When `true` this will perform a case-insensitive substring match for the provided `filterName`. When `false` the filter name will be searched using [full text search syntax](https://support.atlassian.com/jira-software-cloud/docs/search-for-issues-using-the-text-field/). (optional) (example: null)
     *
     * @return PageBeanFilterDetails
     */
    @GET("/rest/api/3/filter/search")
    suspend fun getFiltersPaginated(
        @Query("filterName") filterName: String? = null,
        @Query("accountId") accountId: String? = null,
        @Query("owner") owner: String? = null,
        @Query("groupname") groupname: String? = null,
        @Query("groupId") groupId: String? = null,
        @Query("projectId") projectId: Long? = null,
        @Query("id") id: List<Long>? = null,
        @Query("orderBy") orderBy: String = "name",
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("expand") expand: String? = null,
        @Query("overrideSharePermissions") overrideSharePermissions: Boolean = false,
        @Query("isSubstringMatch") isSubstringMatch: Boolean = false
    ): PageBeanFilterDetails

    /**
     * GET /rest/api/3/filter/my
     *
     * Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.

     **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:

     *  owned by the user.
     *  shared with a group that the user is a member of.
     *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  shared with a public project.
     *  shared with the public.

    For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
     *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. (optional) (example: null)
     * @param includeFavourites Include the user's favorite filters in the response. (optional) (example: null)
     *
     * @return List<Filter>
     */
    @GET("/rest/api/3/filter/my")
    suspend fun getMyFilters(
        @Query("expand") expand: String? = null,
        @Query("includeFavourites") includeFavourites: Boolean = false
    ): List<Filter>
}