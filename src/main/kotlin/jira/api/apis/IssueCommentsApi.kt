/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.*
import retrofit2.http.*

interface IssueCommentsApi {

    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/comment
     *
     * Adds a comment to an issue.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. (optional) (example: null)
     * @param comment, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issue/{issueIdOrKey}/comment")
    suspend fun addComment(
        @Body issueIdOrKey: String,
        @Query("expand") expand: String? = null,
        @Body comment: Comment
    ): Unit

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/comment/{id}
     *
     * Returns a comment.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:**

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param id The ID of the comment.  (example: null)
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. (optional) (example: null)
     *
     * @return Comment
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/comment/{id}")
    suspend fun getComment(
        @Body issueIdOrKey: String,
        @Body id: String,
        @Query("expand") expand: String? = null
    ): Comment

    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/comment
     *
     * Returns all comments for an issue.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** Comments are included in the response where the user has:

     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
     * @param issueIdOrKey The ID or key of the issue.  (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param orderBy [Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date. (optional) (example: null)
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. (optional) (example: null)
     *
     * @return PageOfComments
     */
    @GET("/rest/api/3/issue/{issueIdOrKey}/comment")
    suspend fun getComments(
        @Body issueIdOrKey: String,
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 100,
        @Query("orderBy") orderBy: String? = null,
        @Query("expand") expand: String? = null
    ): PageOfComments

    /**
     * POST /rest/api/3/comment/list
     *
     * Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** Comments are returned where the user:

     *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
     *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:

     *  `renderedBody` Returns the comment body rendered in HTML.
     *  `properties` Returns the comment's properties. (optional) (example: null)
     * @param issueCommentListRequestBean, request body
     *
     * @return PageBeanComment
     */
    @POST("/rest/api/3/comment/list")
    suspend fun getCommentsByIds(
        @Query("expand") expand: String? = null,
        @Body issueCommentListRequestBean: IssueCommentListRequestBean
    ): PageBeanComment
}