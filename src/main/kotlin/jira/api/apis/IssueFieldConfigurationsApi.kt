/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.FieldConfiguration
import jira.api.models.FieldConfigurationDetails
import jira.api.models.IssueTypeIdsToRemove
import jira.api.models.PageBeanFieldConfigurationDetails
import jira.api.models.PageBeanFieldConfigurationIssueTypeItem
import jira.api.models.PageBeanFieldConfigurationItem
import jira.api.models.PageBeanFieldConfigurationScheme
import jira.api.models.PageBeanFieldConfigurationSchemeProjects
import jira.api.models.UpdateFieldConfigurationSchemeDetails
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface IssueFieldConfigurationsApi {

    /**
     * POST /rest/api/3/fieldconfiguration
     *
     * Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.

    This operation can only create configurations for use in company-managed (classic) projects.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldConfigurationDetails, request body
     *
     * @return FieldConfiguration
     */
    @POST("/rest/api/3/fieldconfiguration")
    suspend fun createFieldConfiguration(
        @Body fieldConfigurationDetails: FieldConfigurationDetails
    ): FieldConfiguration

    /**
     * POST /rest/api/3/fieldconfigurationscheme
     *
     * Creates a field configuration scheme.

    This operation can only create field configuration schemes used in company-managed (classic) projects.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param updateFieldConfigurationSchemeDetails, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/fieldconfigurationscheme")
    suspend fun createFieldConfigurationScheme(
        @Body updateFieldConfigurationSchemeDetails: UpdateFieldConfigurationSchemeDetails
    ): Unit

    /**
     * GET /rest/api/3/fieldconfigurationscheme
     *
     * Returns a [paginated](#pagination) list of field configuration schemes.

    Only field configuration schemes used in classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param id The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. (optional) (example: null)
     *
     * @return PageBeanFieldConfigurationScheme
     */
    @GET("/rest/api/3/fieldconfigurationscheme")
    suspend fun getAllFieldConfigurationSchemes(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("id") id: List<Long>? = null
    ): PageBeanFieldConfigurationScheme

    /**
     * GET /rest/api/3/fieldconfiguration
     *
     * Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:

     *  a list of field configuration item IDs.
     *  whether the field configuration is a default.
     *  whether the field configuration name or description contains a query string.

    Only field configurations used in company-managed (classic) projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param id The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. (optional) (example: null)
     * @param isDefault If *true* returns default field configurations only. (optional) (example: null)
     * @param query The query string used to match against field configuration names and descriptions. (optional) (example: null)
     *
     * @return PageBeanFieldConfigurationDetails
     */
    @GET("/rest/api/3/fieldconfiguration")
    suspend fun getAllFieldConfigurations(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("id") id: List<Long>? = null,
        @Query("isDefault") isDefault: Boolean = false,
        @Query("query") query: String =
    ): PageBeanFieldConfigurationDetails

    /**
     * GET /rest/api/3/fieldconfiguration/{id}/fields
     *
     * Returns a [paginated](#pagination) list of all fields for a configuration.

    Only the fields from configurations used in company-managed (classic) projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration.  (example: null)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     *
     * @return PageBeanFieldConfigurationItem
     */
    @GET("/rest/api/3/fieldconfiguration/{id}/fields")
    suspend fun getFieldConfigurationItems(
        @Body id: Long,
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50
    ): PageBeanFieldConfigurationItem

    /**
     * GET /rest/api/3/fieldconfigurationscheme/mapping
     *
     * Returns a [paginated](#pagination) list of field configuration issue type items.

    Only items used in classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param fieldConfigurationSchemeId The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`. (optional) (example: null)
     *
     * @return PageBeanFieldConfigurationIssueTypeItem
     */
    @GET("/rest/api/3/fieldconfigurationscheme/mapping")
    suspend fun getFieldConfigurationSchemeMappings(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("fieldConfigurationSchemeId") fieldConfigurationSchemeId: List<Long>? = null
    ): PageBeanFieldConfigurationIssueTypeItem

    /**
     * GET /rest/api/3/fieldconfigurationscheme/project
     *
     * Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.

    The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.

    Only field configuration schemes used in classic projects are returned.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset). (optional) (example: null)
     * @param maxResults The maximum number of items to return per page. (optional) (example: null)
     * @param projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.  (example: null)
     *
     * @return PageBeanFieldConfigurationSchemeProjects
     */
    @GET("/rest/api/3/fieldconfigurationscheme/project")
    suspend fun getFieldConfigurationSchemeProjectMapping(
        @Query("startAt") startAt: Long = 0,
        @Query("maxResults") maxResults: Int = 50,
        @Query("projectId") projectId: List<Long>
    ): PageBeanFieldConfigurationSchemeProjects

    /**
     * POST /rest/api/3/fieldconfigurationscheme/{id}/mapping/delete
     *
     * Removes issue types from the field configuration scheme.

    This operation can only modify field configuration schemes used in company-managed (classic) projects.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration scheme.  (example: null)
     * @param issueTypeIdsToRemove, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete")
    suspend fun removeIssueTypesFromGlobalFieldConfigurationScheme(
        @Body id: Long,
        @Body issueTypeIdsToRemove: IssueTypeIdsToRemove
    ): Unit
}