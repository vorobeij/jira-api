/**
 * ⚠️ Do not edit manually ⚠️
 * Generated by openapi-generate. See project's `openapi-generate.sh` for details
 */
package jira.api.apis

import jira.api.models.IssueTypeCreateBean
import jira.api.models.IssueTypeDetails
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface IssueTypesApi {

    /**
     * POST /rest/api/3/issuetype
     *
     * Creates an issue type and adds it to the default issue type scheme.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeCreateBean, request body
     *
     * @return Unit
     */
    @POST("/rest/api/3/issuetype")
    suspend fun createIssueType(
        @Body issueTypeCreateBean: IssueTypeCreateBean
    ): Unit

    /**
     * POST /rest/api/3/issuetype/{id}/avatar2
     *
     * Loads an avatar for the issue type.

    Specify the avatar's local file location in the body of the request. Also, include the following headers:

     *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
     *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

    For example:
    `curl --request POST \ --user email@example.com:<api_token> \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/< image_type>' \ --data-binary "<@/path/to/file/with/your/avatar>" \ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`

    The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.

    The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.

    After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.

     **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the issue type.  (example: null)
     * @param x The X coordinate of the top-left corner of the crop region. (optional) (example: null)
     * @param y The Y coordinate of the top-left corner of the crop region. (optional) (example: null)
     * @param size The length of each side of the crop region.  (example: null)
     *
     * @return Unit
     */
    @POST("/rest/api/3/issuetype/{id}/avatar2")
    suspend fun createIssueTypeAvatar(
        @Body id: String,
        @Query("x") x: Int = 0,
        @Query("y") y: Int = 0,
        @Query("size") size: Int
    ): Unit

    /**
     * GET /rest/api/3/issuetype/{id}/alternatives
     *
     * Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** None.
     * @param id The ID of the issue type.  (example: null)
     *
     * @return List<IssueTypeDetails>
     */
    @GET("/rest/api/3/issuetype/{id}/alternatives")
    suspend fun getAlternativeIssueTypes(
        @Body id: String
    ): List<IssueTypeDetails>

    /**
     * GET /rest/api/3/issuetype
     *
     * Returns all issue types.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** Issue types are only returned as follows:

     *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
     *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
     *
     * @return List<IssueTypeDetails>
     */
    @GET("/rest/api/3/issuetype")
    suspend fun getIssueAllTypes(): List<IssueTypeDetails>

    /**
     * GET /rest/api/3/issuetype/{id}
     *
     * Returns an issue type.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the issue type.  (example: null)
     *
     * @return IssueTypeDetails
     */
    @GET("/rest/api/3/issuetype/{id}")
    suspend fun getIssueType(
        @Body id: String
    ): IssueTypeDetails

    /**
     * GET /rest/api/3/issuetype/project
     *
     * Returns issue types for a project.

    This operation can be accessed anonymously.

     **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectId The ID of the project.  (example: null)
     * @param level The level of the issue type to filter by. Use:

     *  `-1` for Subtask.
     *  `0` for Base.
     *  `1` for Epic. (optional) (example: null)
     *
     * @return List<IssueTypeDetails>
     */
    @GET("/rest/api/3/issuetype/project")
    suspend fun getIssueTypesForProject(
        @Query("projectId") projectId: Long,
        @Query("level") level: Int? = null
    ): List<IssueTypeDetails>
}